// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace WebAPI.Models
{

    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public class Covid
    {



        public partial class Welcome
        {
            [JsonProperty("infected")]
            public long? Infected { get; set; }

            [JsonProperty("tested")]
            public DeceasedUnion Tested { get; set; }

            [JsonProperty("recovered")]
            public DeceasedUnion Recovered { get; set; }

            [JsonProperty("deceased")]
            public DeceasedUnion Deceased { get; set; }

            [JsonProperty("country")]
            public string Country { get; set; }

            [JsonProperty("moreData")]
            public string MoreData { get; set; }

            [JsonProperty("historyData")]
            public string HistoryData { get; set; }

            [JsonProperty("sourceUrl", NullValueHandling = NullValueHandling.Ignore)]
            public Uri SourceUrl { get; set; }

            [JsonProperty("lastUpdatedApify")]
            public DateTimeOffset LastUpdatedApify { get; set; }

            [JsonProperty("lastUpdatedSource")]
            public string LastUpdatedSource { get; set; }
        }

        public enum DeceasedEnum { Na };

        public partial struct DeceasedUnion
        {
            public DeceasedEnum? Enum;
            public long? Integer;

            public static implicit operator DeceasedUnion(DeceasedEnum Enum) => new DeceasedUnion { Enum = Enum };
            public static implicit operator DeceasedUnion(long Integer) => new DeceasedUnion { Integer = Integer };
            public bool IsNull => Integer == null && Enum == null;
        }

        public partial class Welcome
        {
            public static List<Welcome> FromJson(string json) => JsonConvert.DeserializeObject<List<Welcome>>(json, QuickType.Converter.Settings);
        }

        public static class Serialize
        {
        }

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                DeceasedUnionConverter.Singleton,
                DeceasedEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }

        internal class DeceasedUnionConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(DeceasedUnion) || t == typeof(DeceasedUnion?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                switch (reader.TokenType)
                {
                    case JsonToken.Null:
                        return new DeceasedUnion { };
                    case JsonToken.Integer:
                        var integerValue = serializer.Deserialize<long>(reader);
                        return new DeceasedUnion { Integer = integerValue };
                    case JsonToken.String:
                    case JsonToken.Date:
                        var stringValue = serializer.Deserialize<string>(reader);
                        if (stringValue == "NA")
                        {
                            return new DeceasedUnion { Enum = DeceasedEnum.Na };
                        }
                        break;
                }
                throw new Exception("Cannot unmarshal type DeceasedUnion");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                var value = (DeceasedUnion)untypedValue;
                if (value.IsNull)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                if (value.Integer != null)
                {
                    serializer.Serialize(writer, value.Integer.Value);
                    return;
                }
                if (value.Enum != null)
                {
                    if (value.Enum == DeceasedEnum.Na)
                    {
                        serializer.Serialize(writer, "NA");
                        return;
                    }
                }
                throw new Exception("Cannot marshal type DeceasedUnion");
            }

            public static readonly DeceasedUnionConverter Singleton = new DeceasedUnionConverter();
        }

        internal class DeceasedEnumConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(DeceasedEnum) || t == typeof(DeceasedEnum?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null) return null;
                var value = serializer.Deserialize<string>(reader);
                if (value == "NA")
                {
                    return DeceasedEnum.Na;
                }
                throw new Exception("Cannot unmarshal type DeceasedEnum");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                if (untypedValue == null)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                var value = (DeceasedEnum)untypedValue;
                if (value == DeceasedEnum.Na)
                {
                    serializer.Serialize(writer, "NA");
                    return;
                }
                throw new Exception("Cannot marshal type DeceasedEnum");
            }

            public static readonly DeceasedEnumConverter Singleton = new DeceasedEnumConverter();
        }
    }
    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using QuickType;
    //
    //    var welcome = Welcome.FromJson(jsonString);

    namespace QuickType
    {
        using System;
        using System.Collections.Generic;

        using System.Globalization;
        using System.Text.Json.Serialization;
        using System.Text.Json;
        using Newtonsoft.Json;
        using Newtonsoft.Json.Converters;
        using JsonConverter = JsonConverter;
        using JsonSerializer = JsonSerializer;

        public partial class Welcome
        {
            [JsonProperty("infected")]
            public long? Infected { get; set; }

            [JsonProperty("tested")]
            public DeceasedUnion Tested { get; set; }

            [JsonProperty("recovered")]
            public DeceasedUnion Recovered { get; set; }

            [JsonProperty("deceased")]
            public DeceasedUnion Deceased { get; set; }

            [JsonProperty("country")]
            public string Country { get; set; }

            [JsonProperty("moreData")]
            public string MoreData { get; set; }

            [JsonProperty("historyData")]
            public string HistoryData { get; set; }

            [JsonProperty("sourceUrl", NullValueHandling = NullValueHandling.Ignore)]
            public Uri SourceUrl { get; set; }

            [JsonProperty("lastUpdatedApify")]
            public DateTimeOffset LastUpdatedApify { get; set; }

            [JsonProperty("lastUpdatedSource")]
            public string LastUpdatedSource { get; set; }
        }

        public enum DeceasedEnum { Na };

        public partial struct DeceasedUnion
        {
            public DeceasedEnum? Enum;
            public long? Integer;

            public static implicit operator DeceasedUnion(DeceasedEnum Enum) => new DeceasedUnion { Enum = Enum };
            public static implicit operator DeceasedUnion(long Integer) => new DeceasedUnion { Integer = Integer };
            public bool IsNull => Integer == null && Enum == null;
        }

        public partial class Welcome
        {
            public static List<Welcome> FromJson(string json) => JsonConvert.DeserializeObject<List<Welcome>>(json, QuickType.Converter.Settings);
        }

        public static class Serialize
        {
            public static string ToJson(this List<Welcome> self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        }

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                DeceasedUnionConverter.Singleton,
                DeceasedEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }

        internal class DeceasedUnionConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(DeceasedUnion) || t == typeof(DeceasedUnion?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                switch (reader.TokenType)
                {
                    case JsonToken.Null:
                        return new DeceasedUnion { };
                    case JsonToken.Integer:
                        var integerValue = serializer.Deserialize<long>(reader);
                        return new DeceasedUnion { Integer = integerValue };
                    case JsonToken.String:
                    case JsonToken.Date:
                        var stringValue = serializer.Deserialize<string>(reader);
                        if (stringValue == "NA")
                        {
                            return new DeceasedUnion { Enum = DeceasedEnum.Na };
                        }
                        break;
                }
                throw new Exception("Cannot unmarshal type DeceasedUnion");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                var value = (DeceasedUnion)untypedValue;
                if (value.IsNull)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                if (value.Integer != null)
                {
                    serializer.Serialize(writer, value.Integer.Value);
                    return;
                }
                if (value.Enum != null)
                {
                    if (value.Enum == DeceasedEnum.Na)
                    {
                        serializer.Serialize(writer, "NA");
                        return;
                    }
                }
                throw new Exception("Cannot marshal type DeceasedUnion");
            }

            public override void WriteJson(JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) => throw new NotImplementedException();

            public override object ReadJson(JsonReader reader, Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) => throw new NotImplementedException();

            public static readonly DeceasedUnionConverter Singleton = new DeceasedUnionConverter();
        }

        internal class DeceasedEnumConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(DeceasedEnum) || t == typeof(DeceasedEnum?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null) return null;
                var value = serializer.Deserialize<string>(reader);
                if (value == "NA")
                {
                    return DeceasedEnum.Na;
                }
                throw new Exception("Cannot unmarshal type DeceasedEnum");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                if (untypedValue == null)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                var value = (DeceasedEnum)untypedValue;
                if (value == DeceasedEnum.Na)
                {
                    serializer.Serialize(writer, "NA");
                    return;
                }
                throw new Exception("Cannot marshal type DeceasedEnum");
            }

            public static readonly DeceasedEnumConverter Singleton = new DeceasedEnumConverter();
        }
    }
}
